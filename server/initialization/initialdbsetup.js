const pool = require('../config/db');

// Initialize connection pool

const query = ` 
CREATE TYPE role_enum AS ENUM ('TPO', 'Admin','Student', 'Teacher', 'Department', 'President');
CREATE TYPE user_status AS ENUM ('NOTACTIVE', 'ACTIVE');
CREATE TYPE branch_enum AS ENUM ('CMPN', 'INFT', 'ECS', 'EXTC', 'ELEC');
CREATE TYPE year_enum AS ENUM ('FE', 'SE', 'TE', 'BE');
CREATE TYPE exam_status AS ENUM ('draft', 'scheduled', 'live', 'past');
CREATE TYPE response_status AS ENUM ('draft', 'submitted');
CREATE TYPE question_type_enum AS ENUM ('single_choice', 'multiple_choice', 'text', 'image');
CREATE TYPE category_enum AS ENUM (
  'quantitative aptitude',
  'logical reasoning',
  'verbal ability',
  'technical',
  'general knowledge'
);


CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50),
    email VARCHAR(50) UNIQUE,
    password_hash TEXT,
    role role_enum NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status user_status DEFAULT 'NOTACTIVE'::user_status,
    department branch_enum,
    year year_enum,
    rollno INTEGER,
    phone VARCHAR(15)
);
CREATE TABLE departments (
  branch_id SERIAL PRIMARY KEY,
  branch_name VARCHAR(50) UNIQUE NOT NULL,
  duration INT NOT NULL,
  short_form VARCHAR(20) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS exams (
    exam_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    exam_name VARCHAR(30),
    created_by INTEGER,
    duration INTEGER,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status exam_status DEFAULT 'draft'::exam_status,
    target_years year_enum[] NOT NULL,
    target_branches branch_enum[] NOT NULL,
    exam_for role_enum NOT NULL DEFAULT 'Student'::role_enum,

    CONSTRAINT exams_created_by_fkey
        FOREIGN KEY (created_by)
        REFERENCES public.users(user_id)
);



CREATE TABLE IF NOT EXISTS questions (
    question_id SERIAL PRIMARY KEY,
    exam_id INTEGER,
    question_text TEXT,
    options JSONB,
    correct_option CHAR(1),
    category category_enum,
    question_type question_type_enum NOT NULL DEFAULT 'single_choice'::question_type_enum,
    correct_options JSONB,
    image_url TEXT,

    CONSTRAINT questions_exam_id_fkey
        FOREIGN KEY (exam_id)
        REFERENCES public.exams(exam_id)
);

CREATE TABLE IF NOT EXISTS responses (
    response_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    student_id INTEGER,
    exam_id INTEGER,
    question_id INTEGER,
    selected_option CHAR(1),
    answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status response_status DEFAULT 'draft'::response_status,
    selected_options JSONB,
    text_answer TEXT,
    question_type question_type_enum,

    CONSTRAINT responses_exam_id_fkey
        FOREIGN KEY (exam_id)
        REFERENCES public.exams (exam_id),

    CONSTRAINT responses_student_id_fkey
        FOREIGN KEY (student_id)
        REFERENCES public.users (user_id)
);


CREATE TABLE IF NOT EXISTS results (
    result_id SERIAL PRIMARY KEY,
    student_id INTEGER,
    exam_id INTEGER,
    total_score INTEGER,
    max_score INTEGER,
    completed_at TIMESTAMP,
    category_score JSONB DEFAULT '{}'::jsonb,

    CONSTRAINT results_exam_id_fkey
        FOREIGN KEY (exam_id)
        REFERENCES public.exams (exam_id),

    CONSTRAINT results_student_id_fkey
        FOREIGN KEY (student_id)
        REFERENCES public.users (user_id)
);


CREATE TABLE teacher_results (
    result_id SERIAL PRIMARY KEY,
    teacher_id INTEGER,
    exam_id INTEGER,
    question_id INTEGER, 
    marks_allotted INTEGER,  
    max_score INTEGER,
    comments TEXT,  
    completed_at TIMESTAMP,
    FOREIGN KEY (exam_id) REFERENCES exams (exam_id),
    FOREIGN KEY (teacher_id) REFERENCES users (user_id),
    FOREIGN KEY (question_id) REFERENCES questions (question_id),
    UNIQUE (exam_id, question_id, teacher_id) 
);


CREATE TABLE IF NOT EXISTS student_analysis (
    analysis_id SERIAL PRIMARY KEY,
    exam_id INTEGER,
    department_name branch_enum NOT NULL,
    student_id INTEGER,
    student_name VARCHAR(255),
    exam_name VARCHAR(255),
    total_score DOUBLE PRECISION NOT NULL,
    max_score DOUBLE PRECISION NOT NULL,
    attempted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    category JSONB,

    CONSTRAINT student_analysis_exam_id_fkey
        FOREIGN KEY (exam_id)
        REFERENCES public.exams (exam_id)
        ON DELETE CASCADE,

    CONSTRAINT student_analysis_student_id_fkey
        FOREIGN KEY (student_id)
        REFERENCES public.users (user_id)
        ON DELETE CASCADE
);

CREATE TABLE user_analysis (
  student_id INTEGER PRIMARY KEY,
  student_name TEXT NOT NULL,
  department_name TEXT NOT NULL,
  year TEXT NOT NULL,
  accuracy_rate DOUBLE PRECISION DEFAULT 0.0,
  completion_rate DOUBLE PRECISION DEFAULT 0.0,
  category JSONB DEFAULT '{}'::jsonb,
  performance_over_time JSONB DEFAULT '[]'::jsonb,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  total_score INTEGER,
  max_score INTEGER,
  
  CONSTRAINT user_analysis_student_id_fkey
    FOREIGN KEY (student_id)
    REFERENCES public.users(user_id)
);



CREATE TABLE student_rank (
  rank_id SERIAL PRIMARY KEY,
  student_id INTEGER UNIQUE,
  student_name VARCHAR(255),
  department_name TEXT NOT NULL,
  year TEXT NOT NULL,
  total_score INTEGER NOT NULL,
  overall_rank INTEGER NOT NULL,
  department_rank INTEGER NOT NULL,
  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE rank (
  rank_id SERIAL PRIMARY KEY,
  student_id INTEGER UNIQUE,
  student_name VARCHAR(255),
  department_name TEXT NOT NULL,
  year TEXT NOT NULL,
  total_score INTEGER NOT NULL,
  overall_rank INTEGER NOT NULL,
  department_rank INTEGER NOT NULL,
  last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  CONSTRAINT rank_student_id_key UNIQUE (student_id)
);

CREATE TABLE logs (
  logs_id SERIAL PRIMARY KEY,
  user_id INTEGER,
  activity VARCHAR(255) NOT NULL,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status VARCHAR(50),
  details TEXT,

  CONSTRAINT logs_user_id_fkey
    FOREIGN KEY (user_id)
    REFERENCES public.users(user_id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);



CREATE TABLE department_analysis (
  id SERIAL PRIMARY KEY,
  department_name VARCHAR(100) NOT NULL,
  year VARCHAR(10) NOT NULL,
  accuracy_rate DOUBLE PRECISION DEFAULT 0.0,
  subject_performance JSONB DEFAULT '{}'::jsonb,
  performance_over_time JSONB DEFAULT '[]'::jsonb,
  department_rank INTEGER,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  total_score DOUBLE PRECISION DEFAULT 0,
  max_score DOUBLE PRECISION DEFAULT 0,
  student_count INTEGER DEFAULT 0,
  CONSTRAINT unique_department_year UNIQUE (department_name, year)
);


`;

// Function to initialize the database schema
async function initializeDB() {
  try {
    const result = await pool.query(query);
    console.log(`Successfully Completed`);
  } catch (error) {
    console.log(error);
  }
}
initializeDB();

// Export query method and initialization function
//module.exports = { pool, initializeDB };
